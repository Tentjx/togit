package com.music.lrcicsync;

import android.content.Context;
import android.view.View;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Iterator;
import java.util.TreeMap;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;

public class LyricView extends View {
	private static TreeMap<Integer, LyricObject> lrc_map;
	private float mX; // 屏幕X轴的中点，此值固定，保持歌词在X中间显示
	private float offsetY; // 歌词在Y轴上的偏移量，此值会根据歌词的滚动变小
	private static boolean blLrc = false;
	private float touchY; // 当触摸歌词View时，保存为当前触点的Y轴坐标
	private float touchX;
	private boolean blScrollView = false;
	private int lrcIndex = 0; // 保存歌词TreeMap的下标
	private int SIZEWORD = 0;// 显示歌词文字的大小值
	private int INTERVAL = 45;// 歌词每行的间隔
	Paint paint = new Paint();// 画笔，用于画不是高亮的歌词
	Paint paintHL = new Paint();

	public LyricView(Context context) {
		super(context);
        init();
	}

	public LyricView(Context context, AttributeSet attrs) {
		super(context, attrs);
		// TODO Auto-generated constructor stub
        init();

	}

	@Override
	protected void onDraw(Canvas canvas) {
		// TODO Auto-generated method stub
		if (blLrc) {
			paintHL.setTextSize(SIZEWORD); // 设置歌词大小
			paint.setTextSize(SIZEWORD);
			LyricObject temp = lrc_map.get(lrcIndex);
			canvas.drawText(temp.lrc, mX, offsetY + (SIZEWORD + INTERVAL)
					* lrcIndex, paintHL);

			// 画当前歌词之前的歌词
			for (int i = lrcIndex - 1; i >= 0; i--) {
				temp = lrc_map.get(i);
				if (offsetY + (SIZEWORD + INTERVAL) * i < 0) {
					break;
				}
				canvas.drawText(temp.lrc, mX, offsetY + (SIZEWORD + INTERVAL)
						* i, paint);
			}
			// 画当前歌词之后的歌词

			for (int i = lrcIndex + 1; i < lrc_map.size(); i++) {
				temp = lrc_map.get(i);
				if (offsetY + (SIZEWORD + INTERVAL) * i > 600) {
					break;
				}
				canvas.drawText(temp.lrc, mX, offsetY + (SIZEWORD + INTERVAL)
						* i, paint);
			}
		} else {
			paint.setTextSize(25);
			canvas.drawText("找不到歌词", mX, 310, paint);
		}
		super.onDraw(canvas);
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {

		System.out.println("bllll===" + blScrollView);
		float tt = event.getY();
		if (blLrc) {
			return super.onTouchEvent(event);

		}
		switch (event.getAction()) {
		case MotionEvent.ACTION_DOWN:
			touchX = event.getX();
			break;
		case MotionEvent.ACTION_MOVE:
			touchY = tt - touchY;
			offsetY = offsetY + touchY;
			break;
		case MotionEvent.ACTION_UP:
			blScrollView = false;
			break;
		}
		touchY = tt;
		return true;
	}
	
	 public void init(){  
	        lrc_map = new TreeMap<Integer, LyricObject>();  
	        offsetY=320;      
	          
	        paint=new Paint();  
	        paint.setTextAlign(Paint.Align.CENTER);  
	        paint.setColor(Color.GREEN);  
	        paint.setAntiAlias(true);  
	        paint.setDither(true);  
	        paint.setAlpha(180);  
	          
	          
	        paintHL=new Paint();  
	        paintHL.setTextAlign(Paint.Align.CENTER);  
	          
	        paintHL.setColor(Color.RED);  
	        paintHL.setAntiAlias(true);  
	        paintHL.setAlpha(255);  
	    }
	 
	 //根据最长句子决定字体大小
	 public void SetTextSize(){  
	        if(!blLrc){  
	            return;  
	        }  
	        int max=lrc_map.get(0).lrc.length();  
	        for(int i=1;i<lrc_map.size();i++){  
	            LyricObject lrcStrLength=lrc_map.get(i);  
	            if(max<lrcStrLength.lrc.length()){  
	                max=lrcStrLength.lrc.length();  
	            }  
	        }  
	        SIZEWORD=320/max;  
	      
	    } 
	 @Override
	protected void onSizeChanged(int w, int h, int oldw, int oldh) {
		// TODO Auto-generated method stub
		 mX = w * 0.5f; 
		super.onSizeChanged(w, h, oldw, oldh);
	}
	
	 //--------------歌词滚动速度
	    public Float SpeedLrc(){  
	        float speed=0;  
	        if(offsetY+(SIZEWORD+INTERVAL)*lrcIndex>220){  
	            speed=((offsetY+(SIZEWORD+INTERVAL)*lrcIndex-220)/20);  
	  
	        } else if(offsetY+(SIZEWORD+INTERVAL)*lrcIndex < 120){  
	            Log.i("speed", "speed is too fast!!!");  
	            speed = 0;  
	        }  

	        return speed;  
	    }  
	 
	 
	 
}
