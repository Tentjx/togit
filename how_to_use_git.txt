001：创建git版本库。
    第一步： 创建一个空的目录：
             ~$ mkdir mygit
             ~$ cd mygit
             ~/mygit$ pwd
             /home/tjxubuntu/mygit
     第二步：把这个目录设置成一个版本库
              ~/mygit$ git init
              Initialized empty Git repository in /home/tjxubuntu/mygit/.git/
   

002:把文件添加到git里面去
        第一步：首先把需要进行管理的文件放置在这个版本库文件目录下；然后进入文件所在的目录进行操作 
        ~/togit/new$ git add lianxi.txt
        第二步：提交事务
        ~/togit/new$ git commit -m “提示信息”

003：查看git状态
       ~/togit/new$ git status

004 ：查看具体改变内容
~/togit/new$ git diff  happy.txt

005：查看提交log
~/togit/new$ git log --pretty=oneline

006 ：版本回退
    ~/togit/new$ git reset --hard HEAD^   //上一个版本
   ~/togit/new$ git reset --hard HEAD^^  //上2个版本
  ~/togit/new$ git reset --hard HEAD~100 //上100个版本

007 ：到指定版本 
   ~/togit/new$ git reset --hard 版本id
   ~/togit/new$ git reset --hard 1234567

008：查看命令log 可以看到  版本id
        ~/togit/new$ git reflog

009：查看文件内容
    cat happy.txt

010：在git add之前撤销修改
     ~/mygit$ git checkout -- happy.txt

011：在git add后 commit之前撤销修改
    ~/mygit$ git reset HEAD happy.txt

012:commit之后撤销修改
    回退修改前的版本

013：文件删除
   当在文件夹那文件删除后。git会扑捉到删除文件的这一个动作这时你有2个选择:
     1：恢复文件
       回退删除钱的版本
     2：从git仓库里删除这个文件并commit  
         ~/mygit$ git rm zxc
          ~/mygit$ git commit -m "remove"
014：分支管理创建新分支dev
      ~/mygit$ git branch dev

    
015：切换到某一个分支
      ~/mygit$ git checkout dev

016：查看当前分支
    ~/mygit$ git branch 
   显示内容中带*的就是当前分支

016：把分支上的工作合并到工程里
   （1）先切回主分支 master
         ~/mygit$ git checkout master
     （2）把分支dev中的内容合并到当前分支
        ~/mygit$ git merge dev

017：删除某一个分支
           ~/mygit$ git branch -d dev

018：创建并切换到某一分支

    ~/mygit$  git checkout -b dev   
    
    
019：当dev修改的同时 master分支也做了修改  这时合并分支就会出现冲突  
 
  在dev分支上工作
    ~/mygit$ git checkout -b dev
     ~/mygit$ git add happy.txt
    ~/mygit$ git commit -m "add git note from 010-014"

   回到master分支继续工作
     ~/mygit$ git checkout master
     ~/mygit$ git add happy.txt
     ~/mygit$ git commit -m "add git note from 015-018"

把dev分支合并到master分支  出现冲突
~/mygit$ git merge dev
     Auto-merging happy.txt
     CONFLICT (content): Merge conflict in happy.txt
      Automatic merge failed; fix conflicts and then commit the result.

 
手动修改后在提交


查看合并情况：
~/mygit$  git log --graph --pretty=oneline --abbrev-commit


* 43d27eb 我不信
*   ec4e7ee Merge branch 'dev'
|\  
| * 3ce2c77 add git note from 010-014
* | 5e38cb1 add git note from 015-018
|/  
* 361f27e remove

删除分支
         ~/mygit$ git branch -d dev

020：在合并div分支时加上 --no-ff 参数 
  ~/mygit$ git merge --no-ff -m "merge with no-ff" div
           好处：合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并


021：Bug分支：
     当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交：，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
       1。~/mygit$ git stash  保存当前分支dev上的工作现场
       2.切换到master分支 并创建iss-100分支来进行bug修复并删除iss-100分支
      ~/mygit$ git checkout master

      ~/mygit$   git checkout -b iss-100
      ~/mygit$ git add s.txt
      ~/mygit$ git commit -m "sweap a bug in iss-100"

     ~/mygit$ git checkout master
     ~/mygit$ git merge iss-100

~/mygit$ git branch -d iss-100

   3.切换到dev分支继续工作   先回复之前保存的工作现场
       ~/mygit$  git stash list   查看已保存的现场列表
      ~/mygit$ git stash pop    回复现场便删除保存

